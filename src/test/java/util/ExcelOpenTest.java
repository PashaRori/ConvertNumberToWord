package util;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.junit.Assert;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Objects;

import static util.FinalData.*;
import static org.junit.Assert.assertArrayEquals;
import static org.testng.Assert.assertEquals;
import static util.ExcelOpen.getArrayWithValues;

class ExcelOpenTest {
    private static String valueCellString;
    private static String valueCellNumber;
    private static String valueCellData;
    private static String valueCellDouble;
    private static final String NameTestFile = "TestCellString.xls";

    @BeforeAll
    static void beforeTest() {
        ClassLoader classLoader = ExcelOpenTest.class.getClassLoader();

        FileInputStream fileInputStream = null;
        Workbook workbook = null;
        try {
            fileInputStream = new FileInputStream(Objects.requireNonNull(classLoader.getResource(NameTestFile)).getFile());
            workbook = new HSSFWorkbook(fileInputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

        valueCellString = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(0).getCell(0));
        valueCellNumber = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(1).getCell(0));
        valueCellData = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(2).getCell(0));
        valueCellDouble = ExcelOpen.convertCell(workbook.getSheetAt(0).getRow(3).getCell(0));

        try {
            if (fileInputStream != null) fileInputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    void compareValueCellStringExcelAndValueString() {
        assertEquals(CELL_STRING, valueCellString);
    }

    @Test
    void compareValueCellNumberExcelAndValueString() {
        assertEquals(CELL_NUMBER, valueCellNumber);
    }

    @Test
    void compareValueCellDataExcelAndValueString() {
        assertEquals(CELL_DATA, valueCellData);
    }

    @Test
    void compareValueCellDoubleExcelAndValueString() {
        assertEquals(CELL_DOUBLE, valueCellDouble);
    }

    @Test
    void compareValueExcelArrayAndArrayOnRussian() {
        assertEquals(RUSSIAN_EXCEL_ARRAY, getArrayWithValues(LANGUAGE_RUSSIAN));
    }

    @Test
    void compareValueExcelArrayAndNotFullArrayOnRussian() {
        Assert.assertNotEquals(RUSSIAN_DIFFERENCE_EXCEL_ARRAY, getArrayWithValues(LANGUAGE_RUSSIAN));
    }

    @Test
    void compareValueExcelArrayAndArrayOnEnglish() {
        assertEquals(ENGLISH_EXCEL_ARRAY, getArrayWithValues(LANGUAGE_ENGLISH));
    }

    @Test
    void compareValueExcelArrayAndNotFullArrayOnEnglish() {
        Assert.assertNotEquals(ENGLISH_DIFFERENCE_EXCEL_ARRAY, getArrayWithValues(LANGUAGE_ENGLISH));
    }
}